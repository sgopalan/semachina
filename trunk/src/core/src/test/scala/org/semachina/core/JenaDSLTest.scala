package org.semachina.core

import org.junit._
import Assert._
import internal.runners.JUnit4ClassRunner
import org.semachina.jena.JenaExtension._
import org.openjena.atlas.io.IndentedWriter
import com.hp.hpl.jena.query.{ResultSet, QuerySolution, Query}
import runner.RunWith
import scala.collection.JavaConversions._
import org.springframework.context.annotation.AnnotationConfigApplicationContext
import org.semachina.config.AppConfig
import com.weiglewilczek.slf4s.Logging
import com.hp.hpl.jena.vocabulary.RDFS
import com.hp.hpl.jena.rdf.model.{Literal, Resource}
import com.hp.hpl.jena.ontology._
import org.joda.time.DateTime
import org.semachina.jena.config.{DefaultOntModelBuilder, OWLFactory}
import org.semachina.jena.{SemachinaOntModel, SemachinaIndividual, ReadWriteContext}
import org.semachina.jena.impl.SemachinaOntModelImpl

/**
 * Created by IntelliJ IDEA.
 * User: sgopalan
 * Date: Aug 28, 2010
 * Time: 8:09:56 PM
 * To change this template use File | Settings | File Templates.
 */


object JenaDSLTest {
  @BeforeClass
  def setup: Unit = {
    val ctx = new AnnotationConfigApplicationContext(classOf[AppConfig]);
  }

  @AfterClass
  def teardown: Unit = {

  }
}

/**
 * Vocabulary definitions from file:vocabularies/dublin-core_11.xml
 * @author Auto -generated by schemagen on 13 May 2003 08:51
 */
class JenaDSLTest extends Logging {

  val NL = System.getProperty("line.separator")

  def createRdfModel: OntModel = {
    implicit var m = new SemachinaOntModelImpl(OntModelSpec.getDefaultSpec(ProfileRegistry.OWL_DL_LANG))
    var book = getClass.getResource("/book.rdf")

    m.setNsPrefix("rdfs", RDFS.getURI)
    m.setNsPrefix("dc", "http://purl.org/dc/elements/1.1/")

    m.getDocumentManager.setProcessImports( false )

    m.read(book.toString)
    m.prepare

    return m;
  }

  def createFoafModel: SemachinaOntModel = {
    implicit var m = new SemachinaOntModelImpl(OntModelSpec.getDefaultSpec(ProfileRegistry.OWL_DL_LANG))
    var foaf = getClass.getResource("/foaf-example.rdf")

    m.setNsPrefix("rdfs", RDFS.getURI)
    m.setNsPrefix("foaf", "http://xmlns.com/foaf/0.1/")
    m.read(foaf.toString)
    m.prepare

    return m;
  }

  def createModel: SemachinaOntModel = {
    implicit var m = new SemachinaOntModelImpl(OntModelSpec.getDefaultSpec(ProfileRegistry.OWL_DL_LANG))
    var metamodel = getClass.getResource("/metamodel.owl")
    var des = getClass.getResource("/des-example.owl")

    addAltEntry("http://boozallen.com/soa/metamodel.owl", metamodel.toString)
    addAltEntry("http://dcgs.enterprise.spfg/20080324.owl", des.toString)

    m.setNsPrefix("rdfs", RDFS.getURI)
    m.setNsPrefix("bah", "http://boozallen.com/soa/metamodel.owl#")
    m.setNsPrefix("des", "http://dcgs.enterprise.spfg/20080324.owl#")

    m.read(metamodel.toString)
    m.read(des.toString)
    m.prepare

    return m;
  }

  @Test
  def testBuilder : Unit = {
    val m = (new DefaultOntModelBuilder()).done

    var metamodel = getClass.getResource("/metamodel.owl")
    var des = getClass.getResource("/des-example.owl")
    addAltEntry("http://boozallen.com/soa/metamodel.owl", metamodel.toString)
    addAltEntry("http://dcgs.enterprise.spfg/20080324.owl", des.toString)

    m.setNsPrefix("rdfs", RDFS.getURI)
    m.setNsPrefix("bah", "http://boozallen.com/soa/metamodel.owl#")
    m.setNsPrefix("des", "http://dcgs.enterprise.spfg/20080324.owl#")

    m.read(metamodel.toString)
    m.read(des.toString)
    m.prepare

    try{
      println( "hello: " )
      m.doWrite{ implicit model =>
        val newPortfolio =
          &( "des:MyPortfolio" withTypes "bah:Portfolio" ) / "bah:narrowerLayer".obj <<
                { &( "des:BaseLayer" withTypes "bah:Layer" ) /"bah:narrowerServiceLine".obj <<
                        { &( "des:BaseLine" withTypes "bah:ServiceLine" ) }
                }
      }
    }
    catch{
      case e: Throwable => e.printStackTrace()
    }
    println( "hello: " + &( "des:MyPortfolio" )(m) )


    try{
      println( "hello: " )
      m.doWrite{ implicit model =>
        val newPortfolio = &( "des:MyPortfolio1" withTypes "bah:Portfolio" )
          throw new RuntimeException("testing");
      }
    }
    catch{
      case e: Throwable => e.printStackTrace()
    }

    println( "hello: " + &( "des:MyPortfolio1" )(m) )
  }




  @Test
  def testGet : Unit = {
    // Create the data.
    val model = createModel

    implicit val transaction = new SemachinaOntModelImpl(OntModelSpec.getDefaultSpec(ProfileRegistry.OWL_DL_LANG))
    transaction.addSubModel( model )


    model.setNsPrefix("profile", "http://www.daml.org/services/owl-s/1.1/Profile.owl#")

    var portfolio: Individual = &("des:DESPortfolio")
    var narrower = "bah:narrowerLayer".obj

    var service  = &("des:QueryManagementService")
    var serviceName = "profile:serviceName".data[String]( { _ getString } )
    var serviceName2 = "profile:serviceName".data

    println( portfolio / narrower / )

//    println( &("des:QueryManagementService") :> data("profile:serviceName") )
    println( &("des:QueryManagementService") / "profile:serviceName".data({ _ getString } ) / )

    println( service / serviceName / )
    println( service / serviceName /+ )
    println( service / serviceName / )
    println( service / serviceName /+ )

//    (&("des:DESPortfolio") >> obj("bah:narrowerLayer") ) % { println }
    &("des:DESPortfolio") / "bah:narrowerLayer".obj  /+ { println }
    portfolio / narrower /+ {println}

//    ( &("des:QueryManagementService") >> data[String]("profile:serviceName") ) { println }
    (&("des:QueryManagementService") / "profile:serviceName".data( _ getString )) /+   { println }
    (&("des:QueryManagementService") / "profile:serviceName".data) /+ { println }
    service / serviceName /+ { println }
    service / serviceName /+ { println }


    println( &("des:DESPortfolio") / "bah:narrowerLayer".obj << &("des:CommonLayer"))


    println( "sri"^"xsd:string" )

//    println( service / serviceName < ("sri" @: "en")  )
//    println( service / serviceName /)
//
//    println( service / serviceName <# "sri"  )
//    println( service / serviceName /)
//
//    println( service / serviceName < ("sri" ^ "xsd:string")  )
//    println( service / serviceName /)

    //println( service / serviceName << #:("sri") )
    service / serviceName2 /#+ { println }

    val datetime = new DateTime(2004, 12, 25, 12, 0, 0, 0)
    println( datetime ^ "xsd:dateTime" )

    val newPortfolio =
        &( "des:MyPortfolio" withTypes "bah:Portfolio" ) / narrower <<
              { &( "des:BaseLayer" withTypes "bah:Layer" ) /"bah:narrowerServiceLine".obj <<
                      { &( "des:BaseLine" withTypes "bah:ServiceLine" ) }
              }

      println( newPortfolio/narrower/"bah:narrowerServiceLine".obj / )

    model.add( transaction )

   println("basemodel: " + &("des:MyPortfolio")(model))
//    val newPortfolio =
//      &( "des:MyPortfolio" withTypes $("bah:Portfolio") ) / narrower  << (&( "des:BaseLayer" withType ${"bah:ServiceLayer"} ) .
//              /obj("bah:ServiceLine") << &( "des:BaseLine" withType $("bah:ServiceLine")))
//    println( newPortfolio )


    model.close
  }

//  @Test
//  def testFoafGet = {
//    implicit val model = createFoafModel
//
//    var personType = asRDFType( "foaf:Person" )
//    var knows = asProperty( "foaf:knows" )
//
//    println( "is foaf:knows an object property: " + knows.isObjectProperty )
//
////    personType.list(true) { person =>
////      var knowsValue = new IndividualPropertyValueWrapper( person, knows )
////      println( knowsValue.asObject )
////    }
//
//    model.close
//  }
//
//  @Test
//  def testRdfGet = {
//    implicit val model = createRdfModel
//
//    var book = &("http://arq.example/Book/0596002637")
//    var subject = asProperty( "dc:subject" )
//    var subjectValue = new IndividualPropertyValueWrapper( book, subject )
//
//    //println( subjectValue.asLiteral )
//    model.close
//  }
}