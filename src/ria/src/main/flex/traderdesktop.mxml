<?xml version="1.0" encoding="utf-8"?>
<mx:Application applicationComplete="initApp()" xmlns:mx="http://www.adobe.com/2006/mxml">
    <mx:Script><![CDATA[

			import org.springframework.flex.samples.marketfeed.Stock;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.Consumer;
	
			[Bindable]
			private var items:ArrayCollection;
	
			[Bindable]
			private var title:String;
	
			private var consumers:Object;		

			private var stockMap:Object;
			
			private function initApp():void
			{
				consumers = new Object();
				stockMap = new Object();
				items = new ArrayCollection();
				initializeWatchList(["IBM", "JBLU", "ADBE", "GE", "C"]);
			}
			
			private function deleteSymbol():void
			{
				var symbol:String = dg.selectedItem.symbol;
				unsubscribe(symbol);
				items.removeItemAt(dg.selectedIndex);
				delete stockMap[symbol];
			}
			
			public function initializeWatchList(list:Array):void
			{
				for (var i:int=0; i<list.length; i++)
				{
					addSymbol(list[i]);	
				}
			}
			
			private function addSymbol(symbol:String):void
			{
				if (symbol == null || symbol == "")
				{
					Alert.show("Cannot add an empty symbol");
					return;
				}
	
				symbol = symbol.toUpperCase();
				if (stockMap.hasOwnProperty(symbol))
				{
					Alert.show("Symbol '" + symbol + "' is already in the list");
					return;
				}
	
				var stock:Stock = new Stock();
				stock.symbol = symbol;
				stockMap[symbol] = stock;
				items.addItem(stock);
				subscribe(symbol);
			}
			
			private function subscribe(symbol:String):void
			{
				var consumer:Consumer = new Consumer();
				consumer.destination = "market-feed";
				consumer.subtopic = symbol;
				consumer.channelSet = cs;
				consumer.addEventListener(MessageEvent.MESSAGE, messageHandler);
				consumer.subscribe();
				consumers[symbol] = consumer;
			}
			
			private function unsubscribe(symbol:String):void
			{
				if (consumers[symbol])
				{
					var consumer:Consumer = consumers[symbol];
					consumer.removeEventListener(MessageEvent.MESSAGE, messageHandler);
					if (consumer.subscribed)
					{
						consumer.unsubscribe();
					}
					delete consumers[symbol];
				}
			}
	
			private function messageHandler(event:MessageEvent):void 
			{
				var changedStock:Stock = event.message.body as Stock;
				var stock:Stock = stockMap[changedStock.symbol];
				
				BackgroundColorRenderer.symbol = changedStock.symbol;
				
				if (stock)
				{
					stock.open = changedStock.open;
					stock.change = changedStock.change;
					stock.last = changedStock.last;
					stock.high = changedStock.high;
					stock.low = changedStock.low;
					stock.date = changedStock.date;
				}
	        }
			
			private function formatNumber(item:Object, column:DataGridColumn):String
			{
				return nf.format(item[column.dataField]);
			}
			
		
		]]></mx:Script>
    <mx:ChannelSet id="cs">
        <mx:AMFChannel url="http://localhost:8080/semachina-server/messagebroker/amflongpolling"/>
        <mx:AMFChannel url="http://localhost:8080/semachina-server/messagebroker/amfpolling"/>
    </mx:ChannelSet>
    <mx:NumberFormatter id="nf" precision="2"/>

    <mx:RemoteObject id="marketFeedStarter" destination="marketFeedStarter" channelSet="{cs}"/>
 	<mx:RemoteObject id="myService" destination="myService" channelSet="{cs}"/>


    <mx:Panel title="Watch List" width="400" height="400">
        <mx:HBox height="25">
            <mx:Label id="123" x="22" y="67" width="74" height="18" />
            <mx:Button label="Start" click="marketFeedStarter.start()" width="100" height="22"/>
            <mx:Button label="Stop" click="marketFeedStarter.stop()" width="100" height="22"/>
        </mx:HBox>
        <mx:DataGrid id="dg" dataProvider="{items}" width="401" height="401">
            <mx:columns>
                <mx:DataGridColumn headerText="Symbol" dataField="symbol" width="80"/>
                <mx:DataGridColumn headerText="Open" dataField="open" labelFunction="formatNumber" textAlign="right" width="60"/>
                <mx:DataGridColumn headerText="Last" dataField="last" itemRenderer="BackgroundColorRenderer" labelFunction="formatNumber" textAlign="right" width="60"/>
                <mx:DataGridColumn headerText="Change" dataField="change" itemRenderer="ColorRenderer" labelFunction="formatNumber" textAlign="right" width="60"/>
                <mx:DataGridColumn headerText="High" dataField="high" labelFunction="formatNumber" textAlign="right" width="60"/>
                <mx:DataGridColumn headerText="Low" dataField="low" labelFunction="formatNumber" textAlign="right" width="60"/>
            </mx:columns>
        </mx:DataGrid>
        <mx:ControlBar width="66" height="44">
            <mx:VBox width="100%" height="200">
                <mx:Text width="100%" height="18">
                    <mx:text>The stocks available in the sample feed are: XOM, WMT, GM, CVX, COP, GE, C, AIG, GOOG, ADBE, JBLU, COKE, GENZ, YHOO, IBM, BA, SAP, MOT, VZ, MCD.</mx:text>
                </mx:Text>
                <mx:HBox width="100%" height="100">
                    <mx:TextInput id="symbol" width="50" height="22" enter="addSymbol(symbol.text);symbol.text='';"/>
                    <mx:Button label="Add Symbol" click="addSymbol(symbol.text);symbol.text='';" width="100" height="22"/>
                    <mx:Spacer width="100%"/>
                    <mx:Button label="Delete Symbol" enabled="{dg.selectedItem}" click="deleteSymbol()" width="109" height="22"/>
                </mx:HBox>
            </mx:VBox>
        </mx:ControlBar>
    </mx:Panel>
    <mx:Script><![CDATA[

            [Bindable]
            public var selectedNode:XML;

            // Event handler for the Tree control change event.
            public function treeChanged(event:Event):void {
                selectedNode=Tree(event.target).selectedItem as XML;
            }
        ]]></mx:Script>
    <mx:XMLList id="treeData">
        <mx:node label="Mail Box">
            <mx:node label="Inbox">
                <mx:node label="Marketing"/>
                <mx:node label="Product Management"/>
                <mx:node label="Personal"/>
            </mx:node>
            <mx:node label="Outbox">
                <mx:node label="Professional"/>
                <mx:node label="Personal"/>
            </mx:node>
            <mx:node label="Spam"/>
            <mx:node label="Sent"/>
        </mx:node>
    </mx:XMLList>
    <mx:Panel title="Tree Control" color="0xffffff" width="500" height="200" borderAlpha="0.15" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
        <mx:Label text="Select a node in the Tree control." width="501" height="18" color="0x323232"/>
        <mx:HDividedBox width="100%" height="100%" color="0x323232">
            <mx:Tree id="myTree" dataProvider="{treeData}" change="treeChanged(event)" width="251" height="202" labelField="@label" showRoot="false"/>
            <mx:TextArea text="Selected Item: {selectedNode.@label}" width="50%" height="100%"/>
        </mx:HDividedBox>
    </mx:Panel>
</mx:Application>